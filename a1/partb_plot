#!/usr/bin/python

# References:
# http://gnuplot.sourceforge.net/demo/boxplot.html
# http://stackoverflow.com/questions/2161932/calling-gnuplot-from-python
# http://www.kleerekoper.co.uk/2014/05/how-to-create-heatmap-in-gnuplot.html

import argparse
import csv
import os
import subprocess

def gnuplot_exec(cmds, data):
    """Runs gnuplot with the given cmds and data."""
    args = ['gnuplot', '-e', (';'.join([str(c) for c in cmds]))]
    program = subprocess.Popen(args, stdin=subprocess.PIPE)
    for line in data:
        program.stdin.write(str(line) + os.linesep)
    return program

def plot_nodes_best(data, out_filename):
    """Ultra-hacky definitions of gnuplot commands to create a boxplot with
    4 boxes for the 4 nodes."""
    cmds = [
        'set term postscript eps color solid',
        'set output "%s_nodes_best.eps"' % out_filename,
        'set size 0.75,0.55',
        'set title "Memory access bandwidth"',
        'set ylabel "Avg. Best Rate to memnode 0 (MB/s)"',

        'set style fill solid 0.35',
        'set style data boxplot',
        'set boxwidth 0.5',
        'set pointsize 0.5',
        'set border 2',
        'unset key',

        'set xtics ("Node 0" 1, "Node 2" 2, "Node 4" 3, "Node 6" 4)',

        "plot '-' using (1):1, '' using (2):2, '' using (3):3, '' using (4):4"
    ]

    # Repeat the data multiple times to get it to work with stdin
    dat = []
    for i in range(4):
        dat.extend(data)
        dat.append('e')

    gnuplot_exec(cmds, dat)

def plot_nodes_avgs(data, out_filename):
    """Ultra-hacky definitions of gnuplot commands to create a boxplot
    for the avg test results."""
    cmds = [
        'set term postscript eps color solid',
        'set output "%s_nodes_avgs.eps"' % out_filename,
        'set size 0.75,1',
        'set title "Average times for stream tests"',
        'set xlabel "Node/test"',
        'set ylabel "Average time (microseconds)"',

        'set yrange [0:0.6]',
        'set style fill solid 0.35',
        'set style data boxplot',
        'set boxwidth 0.5',
        'set pointsize 0.5',
        'set border 2',
        'set xtics rotate',
        'unset key',

        'set xtics ("N0: Copy" 1, "N0: Add" 2, "N0: Scale" 3, "N0: Triad" 4, "N2: Copy" 5, "N2: Add" 6, "N2: Scale" 7, "N2: Triad" 8, "N4: Copy" 9, "N4: Add" 10, "N4: Scale" 11, "N4: Triad" 12, "N6: Copy" 13, "N6: Add" 14, "N6: Scale" 15, "N6: Triad" 16)',
        "plot '-' using (1):1, '' using (2):2, '' using (3):3, '' using (4):4, '' using (5):5, '' using (6):6, '' using (7):7, '' using (8):8, '' using (9):9, '' using (10):10, '' using (11):11, '' using (12):12, '' using (13):13, '' using (14):14, '' using (15):15, '' using (16):16"
    ]

    # Repeat the data multiple times to get it to work with stdin
    dat = []
    for i in range(16):
        dat.extend(data)
        dat.append('e')

    gnuplot_exec(cmds, dat)


def plot_cpu_occurences(data, out_filename):
    """Generates a graph that shows how many times the cores were chosen
    in the tests."""
    cmds = [
        'set term postscript eps color solid',
        'set output "%s_cpus.eps"' % out_filename,
        'set size 0.75,0.45',
        'set title "Core occurences"',
        'set xlabel "Core"',
        'set ylabel "Occurences"',
        'set key off',
        'set border 3',

        'set xrange[-1:48]',
        'set boxwidth 0.25 absolute',
        'set style fill solid 1.0 noborder',

        "plot '-' using ($1):(1) smooth frequency with boxes"
    ]

    gnuplot_exec(cmds, data)


if __name__ == '__main__':
    # Take CSV file generated by partb_data as input
    argparser = argparse.ArgumentParser(description='Script to parse data and plot data generated by partb_data.')
    argparser.add_argument('-i', '--input', help='The data file name.', required=True)
    argparser.add_argument('-o', '--output', help='The output EPS file name. Defaults to "partb".', default='partb')
    args = argparser.parse_args()

    # Check that the data file exists
    if not args.input or not os.path.isfile(args.input):
        stderr.write('Invalid input file\n')
        exit(1)

    # Parse CSV file
    with open(args.input, 'r') as datafile:
        csv_data = list(csv.DictReader(datafile))

    if csv_data is None:
        stderr.write("Couldn't parse CSV file\n")
        exit(1)

    # Figure out which node each data point belongs to and calculate average
    # of the best times
    best = [[] for i in range(4)]
    avgs = [[] for i in range(16)]
    for row in csv_data:
        node = int(row['CPU']) // 12
        best[node].append((float(row['Copy: Best']) + float(row['Scale: Best']) + float(row['Add: Best']) + float(row['Triad: Best'])) / 4)
        avgs[(node * 4)].append(float(row['Copy: Avg']))
        avgs[(node * 4)+1].append(float(row['Scale: Avg']))
        avgs[(node * 4)+2].append(float(row['Add: Avg']))
        avgs[(node * 4)+3].append(float(row['Triad: Avg']))

    # Create space-separated data, where each column corresponds to a node
    best_dat = []
    for row in range(len(best[0])):
        best_dat.append(' '.join([str(best[col][row]) for col in range(len(best))]))

    best_avgs = []
    for row in range(len(avgs[0])):
        best_avgs.append(' '.join([str(avgs[col][row]) for col in range(len(avgs))]))

    # Plot the data with gnuplot
    output = args.output.strip()
    plot_cpu_occurences([row['CPU'] for row in csv_data], output)
    plot_nodes_best(best_dat, output)
    plot_nodes_avgs(best_avgs, output)
